tabPanel("New", plotlyOutput("country_plot")),
tabPanel("Cumulative (log10)", plotlyOutput("country_plot_cumulative_log"))
)
)
)
)
)
)
)
)
ui <- bootstrapPage(
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
HTML('<a style="text-decoration:none;cursor:default;color:#FFFFFF;"
class="active" href="#">iCanFIND</a>'), id="nav",
windowTitle = "iCanFIND",
tabPanel("COVID-19 mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
tabPanel("Region plots",
sidebarLayout(
sidebarPanel(
span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_select", "Level:",
choices = c("Global", "Continent", "Country", "US state"),
selected = c("Country"),
multiple = FALSE),
pickerInput("outcome_select", "Outcome:",
choices = c("Deaths per million", "Cases per million", "Cases (total)", "Deaths (total)"),
selected = c("Deaths per million"),
multiple = FALSE),
pickerInput("start_date", "Plotting start date:",
choices = c("Date", "Week of 100th confirmed case", "Week of 10th death"),
options = list(`actions-box` = TRUE),
selected = "Date",
multiple = FALSE),
"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
),
mainPanel(
tabsetPanel(
tabPanel("Cumulative", plotlyOutput("country_plot_cumulative")),
tabPanel("New", plotlyOutput("country_plot")),
tabPanel("Cumulative (log10)", plotlyOutput("country_plot_cumulative_log"))
)
)
)
)
)
)
)
)
ui <- bootstrapPage(
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
HTML('<a style="text-decoration:none;cursor:default;color:#FFFFFF;"
class="active" href="#">iCanFIND</a>'), id="nav",
windowTitle = "iCanFIND",
tabPanel("COVID-19 mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
tabPanel("Region plots",
sidebarLayout(
sidebarPanel(
span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_select", "Level:",
choices = c("Global", "Continent", "Country", "US state"),
selected = c("Country"),
multiple = FALSE),
pickerInput("outcome_select", "Outcome:",
choices = c("Deaths per million", "Cases per million", "Cases (total)", "Deaths (total)"),
selected = c("Deaths per million"),
multiple = FALSE),
pickerInput("start_date", "Plotting start date:",
choices = c("Date", "Week of 100th confirmed case", "Week of 10th death"),
options = list(`actions-box` = TRUE),
selected = "Date",
multiple = FALSE),
"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
)
)
)
)
)
)
)
ui <- bootstrapPage(
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
HTML('<a style="text-decoration:none;cursor:default;color:#FFFFFF;"
class="active" href="#">iCanFIND</a>'), id="nav",
windowTitle = "iCanFIND",
tabPanel("COVID-19 mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
tabPanel("Region plots",
sidebarLayout(
sidebarPanel(
span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_select", "Level:",
choices = c("Global", "Continent", "Country", "US state"),
selected = c("Country"),
multiple = FALSE),
pickerInput("outcome_select", "Outcome:",
choices = c("Deaths per million", "Cases per million", "Cases (total)", "Deaths (total)"),
selected = c("Deaths per million"),
multiple = FALSE),
pickerInput("start_date", "Plotting start date:",
choices = c("Date", "Week of 100th confirmed case", "Week of 10th death"),
options = list(`actions-box` = TRUE),
selected = "Date",
multiple = FALSE),
"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
),
mainPanel(
tabsetPanel(
tabPanel("Cumulative"),
tabPanel("New"),
tabPanel("Cumulative (log10)")
)
)
)
)
)
)
)
)
shinyApp(ui,server)
shinyApp(ui,server)
exit()
quit()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gunsagar-gulati',
token='1D9BDFB5ACF8F9B718B88546683CDDF3',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gunsagar-gulati',
token='1D9BDFB5ACF8F9B718B88546683CDDF3',
secret='lClgP8KNM40JWqhv8sDq/UDlNebglLM1K+GPJ3pS')
seer <- read.table("www/SEER_Estimates.txt", sep = "\t", header = T, check.names = F)
cancers <- seer$`TCGA symbol`
years <- as.numeric(colnames(seer[4:29]))
tcga_muts <- fread("www/TCGA_muts_OncoKB.txt", data.table = F)
library(data.table)
#Import data
seer <- read.table("www/SEER_Estimates.txt", sep = "\t", header = T, check.names = F)
cancers <- seer$`TCGA symbol`
years <- as.numeric(colnames(seer[4:29]))
tcga_muts <- fread("www/TCGA_muts_OncoKB.txt", data.table = F)
tcga_cna <- fread("www/TCGA_cna_OncoKB.txt", data.table = F)
tcga_fusion <- fread("www/TCGA_fusion_OncoKB.txt", data.table = F)
#mut_class <- sort(unique(tcga_muts$Variant_Classification))
mut_prediction <- c("Likely inactivating", "Inactivating")
cna_type <- unique(tcga_cna$ALTERATION)
fusion_type <- unique(tcga_fusion$MUTATION_EFFECT)
data <- list(mut_prediction, cna_type, fusion_type, years, cancers, seer)
getwd()
saveRDS(data, "www/data.rds")
hugo_symbol <- sort(unique(tcga_muts$Hugo_Symbol))
tcga_muts <- cbind.data.frame(tcga_muts$Hugo_Symbol, tcga_muts$HGVSp_Short)
df <- split.data.frame(tcga_muts, tcga_muts$`tcga_muts$Hugo_Symbol`)
df <- lapply(df, function(x) x[,-1])
df <- lapply(df, function(x) gsub("p.", "", unique(x)))
df
names(df)
length(df)
tcga <- readRDS("TCGA_variants2.rds")
hugo_symbol
tcga
tit <- unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL))
unique(tit) -> tit
tit
sort(tit) -> tit
tit
c(data, hugo_symbol = tit) -> data
saveRDS(data, "www/data.rds")
data$names(data)
names(data?)
names(data)
data[1:7] -> data
data[7]
data[1:6] -> data
c(data, list(tit)) -> data2
names(data2)
data2[[7]]
names(data)
data[[1]]
names(data) <- c("mut_prediction", "cna_type", "fusion_type", "years", "cancers", "seer", "hugo_symbol")
length(data)
c(data, list(tit)) -> data
names(data) <- c("mut_prediction", "cna_type", "fusion_type", "years", "cancers", "seer", "hugo_symbol")
saveRDS(data, "www/data.rds")
data$seer
#Read in
seer <- read.table("www/SEER_Estimates.txt", sep = "\t", header = T, check.names = F)
seer
tcga <- readRDS("TCGA_variants2.rds")
dfci <- readRDS("DFCI_variants2.rds")
mskp <- readRDS("MSKP_variants2.rds")
geneMuts <- readRDS("geneMuts.rds")
object.size()
?object.size
object.size(Tcga)
object.size(tcga)
563243448/1000000
length(tcga)
length(tcga[[1]])
length(tcga[[2]])
length(tcga[[3]])
length(tcga[[4]])
sum(unlist(lapply(tcga[[1]], function(x) nrow)))
sum(unlist(lapply(tcga[[1]], function(x) nrow(x))))
length(unique((unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL))))
)
length(sum(is.na(((unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL)))))))
sum(is.na(((unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL))))))
#app.R
#Libraries
library(shinythemes)
library(shinyWidgets)
library(data.table)
library("lubridate")
library("plotly")
#Functions
#Function
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Mut - select one
mut_value <- function(muts, gene, selection, amino){
if(selection == "Select my own mutations"){
gene_mut <- unlist(lapply(muts, function(x) {
ifelse(length(which(gsub("p.", "", x[which(as.character(unlist(x$Hugo_Symbol)) == gene),]$HGVSp_Short) %in% amino))>0, 1, 0)
}))
} else if (selection == "Inactivating"){
gene_mut <- calculateMutType(muts, gene)[[2]]
} else if (selection == "Likely inactivating"){
gene_mut <- calculateMutType(muts, gene)[[1]]
}
return(gene_mut)
}
#CNA - select one
cna_value <- function(cna, gene, selection){
if(sum(selection %in% "Any")>0){
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% c("Deletion", "Amplification")))>0, 1, 0)
}))
} else if(selection == "None"){
gene_cna <- NA
} else {
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% selection))>0, 1, 0)
}))
}
return(gene_cna)
}
#Fusion - select one
fusion_value <- function(fusion, gene, selection){
if(sum(selection %in% "Any")>0){
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% c(c("Unknown", "Likely Loss-of-function", "Loss-of-function", "Likely Gain-of-function", "Gain-of-function"))))>0, 1, 0)
}))
} else if(selection == "None"){
gene_fusion <- NA
} else {
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% selection))>0, 1, 0)
}))
}
return(gene_fusion)
}
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Data
data <- readRDS("data.rds")
#app.R
#Libraries
library(shinythemes)
library(shinyWidgets)
library(data.table)
library("lubridate")
library("plotly")
#Functions
#Function
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Mut - select one
mut_value <- function(muts, gene, selection, amino){
if(selection == "Select my own mutations"){
gene_mut <- unlist(lapply(muts, function(x) {
ifelse(length(which(gsub("p.", "", x[which(as.character(unlist(x$Hugo_Symbol)) == gene),]$HGVSp_Short) %in% amino))>0, 1, 0)
}))
} else if (selection == "Inactivating"){
gene_mut <- calculateMutType(muts, gene)[[2]]
} else if (selection == "Likely inactivating"){
gene_mut <- calculateMutType(muts, gene)[[1]]
}
return(gene_mut)
}
#CNA - select one
cna_value <- function(cna, gene, selection){
if(sum(selection %in% "Any")>0){
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% c("Deletion", "Amplification")))>0, 1, 0)
}))
} else if(selection == "None"){
gene_cna <- NA
} else {
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% selection))>0, 1, 0)
}))
}
return(gene_cna)
}
#Fusion - select one
fusion_value <- function(fusion, gene, selection){
if(sum(selection %in% "Any")>0){
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% c(c("Unknown", "Likely Loss-of-function", "Loss-of-function", "Likely Gain-of-function", "Gain-of-function"))))>0, 1, 0)
}))
} else if(selection == "None"){
gene_fusion <- NA
} else {
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% selection))>0, 1, 0)
}))
}
return(gene_fusion)
}
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Data
data <- readRDS("www/data.rds")
seer <- data$seer
mut_prediction <- data$mut_prediction
cna_type <- data$cna_type
fusion_type <- data$fusion_type
years <- data$years
cancers <- data$cancers
seer <- data$seer
hugo_symbol <- data$hugo_symbol
tcga <- readRDS("www/TCGA_variants2.rds")
dfci <- readRDS("www/DFCI_variants2.rds")
mskp <- readRDS("www/MSKP_variants2.rds")
geneMuts <- readRDS("www/geneMuts.rds")
source(ui.R)
source("ui.R")
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
source("server.R")
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='gunsagar-gulati',
token='1D9BDFB5ACF8F9B718B88546683CDDF3',
secret='lClgP8KNM40JWqhv8sDq/UDlNebglLM1K+GPJ3pS')
library(rsconnect)
rsconnect::deployApp("app.R")
library(rsconnect)
rsconnect::deployApp("./")
library(rsconnect)
rsconnect::deployApp("./")
library(rsconnect)
rsconnect::deployApp("./")
library(rsconnect)
rsconnect::deployApp("./")
library(lme4)
rsconnect::deployApp("./")
rsconnect::deployApp("./")
library(lme4)
version(lme4)
version()
?version
version("lme4")
getInf()
sessionInfo()
install_url("https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz")
library(devtools)
https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz
install_url("https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz")
install_url("https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz")
GETWD()
getwd()
?shinytheme
#Libraries
library(shinythemes)
?shinytheme
#Data
data <- readRDS("www/data.rds")
seer <- data$seer
mut_prediction <- data$mut_prediction
cna_type <- data$cna_type
fusion_type <- data$fusion_type
years <- data$years
cancers <- data$cancers
seer <- data$seer
hugo_symbol <- data$hugo_symbol
#Libraries
library(shinythemes)
library(shinyWidgets)
library(data.table)
library(lubridate)
library(plotly)
library(shiny)
library(ggplot2)
library(dplyr)
#Functions
#Function
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Mut - select one
mut_value <- function(muts, gene, selection, amino){
if(selection == "Select my own mutations"){
gene_mut <- unlist(lapply(muts, function(x) {
ifelse(length(which(gsub("p.", "", x[which(as.character(unlist(x$Hugo_Symbol)) == gene),]$HGVSp_Short) %in% amino))>0, 1, 0)
}))
} else if (selection == "Inactivating"){
gene_mut <- calculateMutType(muts, gene)[[2]]
} else if (selection == "Likely inactivating"){
gene_mut <- calculateMutType(muts, gene)[[1]]
}
return(gene_mut)
}
#CNA - select one
cna_value <- function(cna, gene, selection){
if(sum(selection %in% "Any")>0){
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% c("Deletion", "Amplification")))>0, 1, 0)
}))
} else if(selection == "None"){
gene_cna <- NA
} else {
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% selection))>0, 1, 0)
}))
}
return(gene_cna)
}
#Fusion - select one
fusion_value <- function(fusion, gene, selection){
if(sum(selection %in% "Any")>0){
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% c(c("Unknown", "Likely Loss-of-function", "Loss-of-function", "Likely Gain-of-function", "Gain-of-function"))))>0, 1, 0)
}))
} else if(selection == "None"){
gene_fusion <- NA
} else {
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% selection))>0, 1, 0)
}))
}
return(gene_fusion)
}
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Data
data <- readRDS("./www/data.rds")
seer <- data$seer
mut_prediction <- data$mut_prediction
cna_type <- data$cna_type
fusion_type <- data$fusion_type
years <- data$years
cancers <- data$cancers
seer <- data$seer
hugo_symbol <- data$hugo_symbol
tcga <- readRDS("www/TCGA_variants2.rds")
dfci <- readRDS("www/DFCI_variants2.rds")
mskp <- readRDS("www/MSKP_variants2.rds")
geneMuts <- readRDS("www/geneMuts.rds")
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
?sliderInput
?conditionalPanel
?plotlyOutput
plotly-shiny
library(
plotly-shiny)
?geom_bar
?labs
?ggplotly
?ggplot
?pickerInput
?renderPlotly
?renderUI

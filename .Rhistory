)
)
)
)
)
)
)
)
shinyApp(ui,server)
shinyApp(ui,server)
exit()
quit()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gunsagar-gulati',
token='1D9BDFB5ACF8F9B718B88546683CDDF3',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gunsagar-gulati',
token='1D9BDFB5ACF8F9B718B88546683CDDF3',
secret='lClgP8KNM40JWqhv8sDq/UDlNebglLM1K+GPJ3pS')
seer <- read.table("www/SEER_Estimates.txt", sep = "\t", header = T, check.names = F)
cancers <- seer$`TCGA symbol`
years <- as.numeric(colnames(seer[4:29]))
tcga_muts <- fread("www/TCGA_muts_OncoKB.txt", data.table = F)
library(data.table)
#Import data
seer <- read.table("www/SEER_Estimates.txt", sep = "\t", header = T, check.names = F)
cancers <- seer$`TCGA symbol`
years <- as.numeric(colnames(seer[4:29]))
tcga_muts <- fread("www/TCGA_muts_OncoKB.txt", data.table = F)
tcga_cna <- fread("www/TCGA_cna_OncoKB.txt", data.table = F)
tcga_fusion <- fread("www/TCGA_fusion_OncoKB.txt", data.table = F)
#mut_class <- sort(unique(tcga_muts$Variant_Classification))
mut_prediction <- c("Likely inactivating", "Inactivating")
cna_type <- unique(tcga_cna$ALTERATION)
fusion_type <- unique(tcga_fusion$MUTATION_EFFECT)
data <- list(mut_prediction, cna_type, fusion_type, years, cancers, seer)
getwd()
saveRDS(data, "www/data.rds")
hugo_symbol <- sort(unique(tcga_muts$Hugo_Symbol))
tcga_muts <- cbind.data.frame(tcga_muts$Hugo_Symbol, tcga_muts$HGVSp_Short)
df <- split.data.frame(tcga_muts, tcga_muts$`tcga_muts$Hugo_Symbol`)
df <- lapply(df, function(x) x[,-1])
df <- lapply(df, function(x) gsub("p.", "", unique(x)))
df
names(df)
length(df)
tcga <- readRDS("TCGA_variants2.rds")
hugo_symbol
tcga
tit <- unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL))
unique(tit) -> tit
tit
sort(tit) -> tit
tit
c(data, hugo_symbol = tit) -> data
saveRDS(data, "www/data.rds")
data$names(data)
names(data?)
names(data)
data[1:7] -> data
data[7]
data[1:6] -> data
c(data, list(tit)) -> data2
names(data2)
data2[[7]]
names(data)
data[[1]]
names(data) <- c("mut_prediction", "cna_type", "fusion_type", "years", "cancers", "seer", "hugo_symbol")
length(data)
c(data, list(tit)) -> data
names(data) <- c("mut_prediction", "cna_type", "fusion_type", "years", "cancers", "seer", "hugo_symbol")
saveRDS(data, "www/data.rds")
data$seer
#Read in
seer <- read.table("www/SEER_Estimates.txt", sep = "\t", header = T, check.names = F)
seer
tcga <- readRDS("TCGA_variants2.rds")
dfci <- readRDS("DFCI_variants2.rds")
mskp <- readRDS("MSKP_variants2.rds")
geneMuts <- readRDS("geneMuts.rds")
object.size()
?object.size
object.size(Tcga)
object.size(tcga)
563243448/1000000
length(tcga)
length(tcga[[1]])
length(tcga[[2]])
length(tcga[[3]])
length(tcga[[4]])
sum(unlist(lapply(tcga[[1]], function(x) nrow)))
sum(unlist(lapply(tcga[[1]], function(x) nrow(x))))
length(unique((unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL))))
)
length(sum(is.na(((unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL)))))))
sum(is.na(((unlist(lapply(tcga[[1]], function(x) x$HUGO_SYMBOL))))))
#app.R
#Libraries
library(shinythemes)
library(shinyWidgets)
library(data.table)
library("lubridate")
library("plotly")
#Functions
#Function
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Mut - select one
mut_value <- function(muts, gene, selection, amino){
if(selection == "Select my own mutations"){
gene_mut <- unlist(lapply(muts, function(x) {
ifelse(length(which(gsub("p.", "", x[which(as.character(unlist(x$Hugo_Symbol)) == gene),]$HGVSp_Short) %in% amino))>0, 1, 0)
}))
} else if (selection == "Inactivating"){
gene_mut <- calculateMutType(muts, gene)[[2]]
} else if (selection == "Likely inactivating"){
gene_mut <- calculateMutType(muts, gene)[[1]]
}
return(gene_mut)
}
#CNA - select one
cna_value <- function(cna, gene, selection){
if(sum(selection %in% "Any")>0){
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% c("Deletion", "Amplification")))>0, 1, 0)
}))
} else if(selection == "None"){
gene_cna <- NA
} else {
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% selection))>0, 1, 0)
}))
}
return(gene_cna)
}
#Fusion - select one
fusion_value <- function(fusion, gene, selection){
if(sum(selection %in% "Any")>0){
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% c(c("Unknown", "Likely Loss-of-function", "Loss-of-function", "Likely Gain-of-function", "Gain-of-function"))))>0, 1, 0)
}))
} else if(selection == "None"){
gene_fusion <- NA
} else {
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% selection))>0, 1, 0)
}))
}
return(gene_fusion)
}
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Data
data <- readRDS("data.rds")
#app.R
#Libraries
library(shinythemes)
library(shinyWidgets)
library(data.table)
library("lubridate")
library("plotly")
#Functions
#Function
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Mut - select one
mut_value <- function(muts, gene, selection, amino){
if(selection == "Select my own mutations"){
gene_mut <- unlist(lapply(muts, function(x) {
ifelse(length(which(gsub("p.", "", x[which(as.character(unlist(x$Hugo_Symbol)) == gene),]$HGVSp_Short) %in% amino))>0, 1, 0)
}))
} else if (selection == "Inactivating"){
gene_mut <- calculateMutType(muts, gene)[[2]]
} else if (selection == "Likely inactivating"){
gene_mut <- calculateMutType(muts, gene)[[1]]
}
return(gene_mut)
}
#CNA - select one
cna_value <- function(cna, gene, selection){
if(sum(selection %in% "Any")>0){
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% c("Deletion", "Amplification")))>0, 1, 0)
}))
} else if(selection == "None"){
gene_cna <- NA
} else {
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% selection))>0, 1, 0)
}))
}
return(gene_cna)
}
#Fusion - select one
fusion_value <- function(fusion, gene, selection){
if(sum(selection %in% "Any")>0){
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% c(c("Unknown", "Likely Loss-of-function", "Loss-of-function", "Likely Gain-of-function", "Gain-of-function"))))>0, 1, 0)
}))
} else if(selection == "None"){
gene_fusion <- NA
} else {
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% selection))>0, 1, 0)
}))
}
return(gene_fusion)
}
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Data
data <- readRDS("www/data.rds")
seer <- data$seer
mut_prediction <- data$mut_prediction
cna_type <- data$cna_type
fusion_type <- data$fusion_type
years <- data$years
cancers <- data$cancers
seer <- data$seer
hugo_symbol <- data$hugo_symbol
tcga <- readRDS("www/TCGA_variants2.rds")
dfci <- readRDS("www/DFCI_variants2.rds")
mskp <- readRDS("www/MSKP_variants2.rds")
geneMuts <- readRDS("www/geneMuts.rds")
source(ui.R)
source("ui.R")
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
source("server.R")
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='gunsagar-gulati',
token='1D9BDFB5ACF8F9B718B88546683CDDF3',
secret='lClgP8KNM40JWqhv8sDq/UDlNebglLM1K+GPJ3pS')
library(rsconnect)
rsconnect::deployApp("app.R")
library(rsconnect)
rsconnect::deployApp("./")
library(rsconnect)
rsconnect::deployApp("./")
library(rsconnect)
rsconnect::deployApp("./")
library(rsconnect)
rsconnect::deployApp("./")
library(lme4)
rsconnect::deployApp("./")
rsconnect::deployApp("./")
library(lme4)
version(lme4)
version()
?version
version("lme4")
getInf()
sessionInfo()
install_url("https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz")
library(devtools)
https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz
install_url("https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz")
install_url("https://cran.r-project.org/src/contrib/lme4_1.1-30.tar.gz")
GETWD()
getwd()
?shinytheme
#Libraries
library(shinythemes)
?shinytheme
#Data
data <- readRDS("www/data.rds")
seer <- data$seer
mut_prediction <- data$mut_prediction
cna_type <- data$cna_type
fusion_type <- data$fusion_type
years <- data$years
cancers <- data$cancers
seer <- data$seer
hugo_symbol <- data$hugo_symbol
#Libraries
library(shinythemes)
library(shinyWidgets)
library(data.table)
library(lubridate)
library(plotly)
library(shiny)
library(ggplot2)
library(dplyr)
#Functions
#Function
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Mut - select one
mut_value <- function(muts, gene, selection, amino){
if(selection == "Select my own mutations"){
gene_mut <- unlist(lapply(muts, function(x) {
ifelse(length(which(gsub("p.", "", x[which(as.character(unlist(x$Hugo_Symbol)) == gene),]$HGVSp_Short) %in% amino))>0, 1, 0)
}))
} else if (selection == "Inactivating"){
gene_mut <- calculateMutType(muts, gene)[[2]]
} else if (selection == "Likely inactivating"){
gene_mut <- calculateMutType(muts, gene)[[1]]
}
return(gene_mut)
}
#CNA - select one
cna_value <- function(cna, gene, selection){
if(sum(selection %in% "Any")>0){
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% c("Deletion", "Amplification")))>0, 1, 0)
}))
} else if(selection == "None"){
gene_cna <- NA
} else {
gene_cna <- unlist(lapply(cna, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$ALTERATION %in% selection))>0, 1, 0)
}))
}
return(gene_cna)
}
#Fusion - select one
fusion_value <- function(fusion, gene, selection){
if(sum(selection %in% "Any")>0){
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% c(c("Unknown", "Likely Loss-of-function", "Loss-of-function", "Likely Gain-of-function", "Gain-of-function"))))>0, 1, 0)
}))
} else if(selection == "None"){
gene_fusion <- NA
} else {
gene_fusion <- unlist(lapply(fusion, function(x) {
ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene),]$MUTATION_EFFECT %in% selection))>0, 1, 0)
}))
}
return(gene_fusion)
}
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#Data
data <- readRDS("./www/data.rds")
seer <- data$seer
mut_prediction <- data$mut_prediction
cna_type <- data$cna_type
fusion_type <- data$fusion_type
years <- data$years
cancers <- data$cancers
seer <- data$seer
hugo_symbol <- data$hugo_symbol
tcga <- readRDS("www/TCGA_variants2.rds")
dfci <- readRDS("www/DFCI_variants2.rds")
mskp <- readRDS("www/MSKP_variants2.rds")
geneMuts <- readRDS("www/geneMuts.rds")
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
?sliderInput
?conditionalPanel
?plotlyOutput
plotly-shiny
library(
plotly-shiny)
?geom_bar
?labs
?ggplotly
?ggplot
?pickerInput
?renderPlotly
?renderUI
setwd("/Users/gunsagargulati/Desktop/AcutaCapital/AADI/draft1/MSKP")
library(data.table)
hg19GeneLengths <- function(symbols){
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs = unlist(mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG))
a1 <- sapply(egs,function(eg){
exons = exons.db[[eg]]
if(!is.null(exons)){
exons = reduce(exons)
sum( width(exons))
}
})
unlist(a1)
}
###
patient <- fread("data_clinical_patient.txt", data.table = F)
patient$PATIENT_ID <- gsub("MSK-P", "MSKP", patient$PATIENT_ID)
sample <- fread("data_clinical_sample.txt", data.table = F)
sample$SAMPLE_ID <- gsub("MSK-P", "MSKP", sample$SAMPLE_ID)
sample$ONCOTREE_CODE[which(sample$CANCER_TYPE == "Soft Tissue Sarcoma")] <- "SOFT_TISSUE"
muts <- fread("data_mutations_extended_OncoKb.txt", data.table = F)
muts$Tumor_Sample_Barcode <- gsub("MSK-P", "MSKP", muts$Tumor_Sample_Barcode)
cna <- fread("data_CNA_OncoKb.txt", data.table = F)
cna$SAMPLE_ID <- gsub("MSK-P", "MSKP", cna$SAMPLE_ID)
fusions <- fread("data_fusions_OncoKb.txt", data.table = F)
fusions$Tumor_Sample_Barcode <- gsub("MSK-P", "MSKP", fusions$Tumor_Sample_Barcode)
#subset by tsc1_2 containing panels and those with cna, fusion, etc data, without MSK heme
assay <- read.table("assay_information.txt", header = T, sep = "\t")
tsc1_2_containing_assays <- unlist(read.table("TSC1_TSC2_containing_assays.txt", header = T, sep = "\t")$x)
cna_variants_only <- intersect(grep("variants", assay$alteration_types), grep("cna", assay$alteration_types))
assay <- assay[intersect(which(assay$SEQ_ASSAY_ID %in% tsc1_2_containing_assays), cna_variants_only), ]
assay <- assay[-which(assay$SEQ_ASSAY_ID == "MSK-IMPACT-HEME-399"),]
sample <- sample[which(sample$SAMPLE_TYPE == "Primary"),]
anatomic <- read.table("TCGAnames.txt", header = T, sep = "\t")
sample <- sample[which(sample$ONCOTREE_CODE %in% anatomic$ONCOTREE),]
#Each tumor should be treated separately but we shouldn't double count and we shouldn't include mets.
sample$SAMPLE_ID -> sample_names
data_ids <- sample_names[which(sample$SEQ_ASSAY_ID %in% assay$SEQ_ASSAY_ID)]
patient$PATIENT_ID -> patient_ids
cna$SAMPLE_ID -> cna_names
muts$Tumor_Sample_Barcode -> muts_names
fusions$Tumor_Sample_Barcode -> fusion_names
Reduce(intersect, list(cna_names, muts_names, fusion_names, data_ids)) -> sect_samples
sect_patients <- lapply(strsplit(sect_samples, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-"))
patient_x <- patient[which(patient$PATIENT_ID %in% sect_patients),]
#subset
muts_x <- muts[which(muts_names %in% sect_samples),]
muts_x$PATIENT_ID <- unlist(lapply(strsplit(muts_x$Tumor_Sample_Barcode, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
muts_x <- split.data.frame(muts_x, muts_x$Tumor_Sample_Barcode)
cna_x <- cna[which(cna_names %in% sect_samples),]
cna_x$PATIENT_ID <- unlist(lapply(strsplit(cna_x$SAMPLE_ID, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
cna_x <- split.data.frame(cna_x, cna_x$SAMPLE_ID)
sample_x <- sample[which(sample_names %in% sect_samples),]
sample_x$PATIENT_ID <- unlist(lapply(strsplit(sample_x$SAMPLE_ID, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
sample_x <- split.data.frame(sample_x, sample_x$SAMPLE_ID)
fusion_x <- fusions[which(fusion_names %in% sect_samples),]
fusion_x$PATIENT_ID <- unlist(lapply(strsplit(fusion_x$Tumor_Sample_Barcode, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
fusion_x <- split.data.frame(fusion_x, fusion_x$Tumor_Sample_Barcode)
centers <- unlist(lapply(sample_x, function(x) unlist(lapply(strsplit(x$PATIENT_ID, "-"), function(i) i[[2]]))))
#make into lists and break into cohorts, DFCI, MSK, and VICC
#TMB
#lapply(y, function(x) sum(as.numeric(hg19GeneLengths(x)))); take the averageof panel lengths
tmb <- unlist(lapply(muts_x, nrow))/unlist(lapply(sample_x,function(x) mean(x$Panel_Length)))
tmb_all <- tmb*1000000
gene <- c("ALK")
for(i in 1:length(gene)){
gene_mut <- unlist(lapply(muts_x, function(x)
ifelse(length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_1)>0)) | length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_cna <- unlist(lapply(cna_x, function(x)
ifelse(length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_1)>0)) | length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_sv <- unlist(lapply(fusion_x, function(x)
ifelse(length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_1)>0)) | length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_all <- ifelse(gene_mut == 1 | gene_cna == 1 | gene_sv == 1, 1, 0)
gene_df <- cbind.data.frame(gene_mut, gene_cna, gene_sv, gene_all)
colnames(gene_df) <- paste0(rep(gene[i],3), c("_mut", "_cna", "_sv", "_all"))
ifelse(i == 1, gene_df2 <- gene_df, gene_df2 <- cbind.data.frame(gene_df2, gene_df))
}
#KRAS, G12C in NSCLC, amgen Sotorasib
kras_mut <- unlist(lapply(muts_x, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) == "KRAS"),]$HGVSp_Short %in% c("p.G12C")))>0, 1, 0)))
kras <- ifelse(unlist(lapply(sample_x, function(x) ifelse(sum(x$ONCOTREE_CODE %in% c("LUAD", "LUSC"))>0, 1, 0)))
& kras_mut == 1, 1, 0)
#TSC1/2, definite mutations and deletions
#Load functions
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}
#filter for definite mutations defined as all out-of-frame deletions and insertions, in-frame deletions and insertions, splice site mutations, translation start site mutations, nonsense mutations, and nonstop mutations.
tsc1_definite <- calculateMutType(muts_x, "TSC1")[[2]]
setwd("/Users/gunsagargulati/Desktop/AcutaCapital/AADI/draft1/DFCI")
library(data.table)
hg19GeneLengths <- function(symbols){
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs = unlist(mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG))
a1 <- sapply(egs,function(eg){
exons = exons.db[[eg]]
if(!is.null(exons)){
exons = reduce(exons)
sum( width(exons))
}
})
unlist(a1)
}
y <- read.table("../MSKP/MSKP_total_df2.txt")
y <- read.table("../MSKP/MSKP_total_df2.txt", sep = "\t")
dim(y)
y[1:3,1:3]
aggregate(y$TSC1.total_muts, list(y$TumorType), mean)
colnames(y)
y <- read.table("../MSKP/MSKP_df2.txt", sep = "\t")
aggregate(y$TSC1.def_mut, list(y$TumorType), mean)

library(shinythemes)
library(shinyWidgets)

ui <- bootstrapPage(
  navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
             HTML('<a style="text-decoration:none;cursor:default;color:#FFFFFF;" 
                  class="active" href="#">iCanFIND</a>'), id="nav",
             windowTitle = "iCanFIND",
             
             tabPanel("COVID-19 mapper",
                      div(class="outer",
                          tags$head(includeCSS("styles.css")),

                          tabPanel("Region plots",
                                   
                                   sidebarLayout(
                                     sidebarPanel(
                                       
                                       span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
                                       span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
                                       
                                       pickerInput("level_select", "Level:",   
                                                   choices = c("Global", "Continent", "Country", "US state"), 
                                                   selected = c("Country"),
                                                   multiple = FALSE),
                                       
                                       pickerInput("region_select", "Country/Region:",   
                                                   choices = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country), 
                                                   options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
                                                   selected = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country)[1:10],
                                                   multiple = TRUE), 
                                       
                                       pickerInput("outcome_select", "Outcome:",   
                                                   choices = c("Deaths per million", "Cases per million", "Cases (total)", "Deaths (total)"), 
                                                   selected = c("Deaths per million"),
                                                   multiple = FALSE),
                                       
                                       pickerInput("start_date", "Plotting start date:",   
                                                   choices = c("Date", "Week of 100th confirmed case", "Week of 10th death"), 
                                                   options = list(`actions-box` = TRUE),
                                                   selected = "Date",
                                                   multiple = FALSE), 
                                       
                                       sliderInput("minimum_date",
                                                   "Minimum date:",
                                                   min = as.Date(cv_min_date,"%Y-%m-%d"),
                                                   max = as.Date(current_date,"%Y-%m-%d"),
                                                   value=as.Date(cv_min_date),
                                                   timeFormat="%d %b"),
                                       
                                       "Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
                                     ),
                                     
                                     mainPanel(
                                       tabsetPanel(
                                         tabPanel("Cumulative", plotlyOutput("country_plot_cumulative")),
                                         tabPanel("New", plotlyOutput("country_plot")),
                                         tabPanel("Cumulative (log10)", plotlyOutput("country_plot_cumulative_log"))
                                       )
                                     )
                                   )
                          
                                        
                          )
                      )
                      
             )          
  )
)




### MAP FUNCTIONS ###
# function to plot cumulative COVID cases by date
cumulative_plot = function(cv_aggregated, plot_date) {
  plot_df = subset(cv_aggregated, date<=plot_date)
  g1 = ggplot(plot_df, aes(x = date, y = cases, color = region)) + geom_line() + geom_point(size = 1, alpha = 0.8) +
    ylab("Cumulative cases") +  xlab("Date") + theme_bw() + 
    scale_colour_manual(values=c(covid_col)) +
    scale_y_continuous(labels = function(l) {trans = l / 1000000; paste0(trans, "M")}) +
    theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), 
          plot.margin = margin(5, 12, 5, 5))
  g1
}

# function to plot new COVID cases by date
new_cases_plot = function(cv_aggregated, plot_date) {
  plot_df_new = subset(cv_aggregated, date<=plot_date)
  g1 = ggplot(plot_df_new, aes(x = date, y = new, colour = region)) + geom_line() + geom_point(size = 1, alpha = 0.8) +
    # geom_bar(position="stack", stat="identity") + 
    ylab("New cases (weekly)") + xlab("Date") + theme_bw() + 
    scale_colour_manual(values=c(covid_col)) +
    scale_y_continuous(labels = function(l) {trans = l / 1000000; paste0(trans, "M")}) +
    theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), 
          plot.margin = margin(5, 12, 5, 5))
  g1
}


# sum cv case counts by date
cv_aggregated = aggregate(cv_cases$cases, by=list(Category=cv_cases$date), FUN=sum)
names(cv_aggregated) = c("date", "cases")

# add variable for new cases in last 7 days
for (i in 1:nrow(cv_aggregated)) { 
  if (i==1) { cv_aggregated$new[i] = 0 }
  if (i>1) { cv_aggregated$new[i] = cv_aggregated$cases[i] - cv_aggregated$cases[i-1] }
}

# add plotting region
cv_aggregated$region = "Global"
cv_aggregated$date = as.Date(cv_aggregated$date,"%Y-%m-%d")



sliderTextInput("plot_date",
                label = h5("Select mapping date"),
                choices = format(unique(cv_cases$date), "%d %b %y"),
                selected = format(current_date, "%d %b %y"),
                grid = FALSE,
                animate=animationOptions(interval = 3000, loop = FALSE))
                          
setwd("/Users/gunsagargulati/Desktop/AcutaCapital/AADI/draft1/MSKP")
library(data.table)
hg19GeneLengths <- function(symbols){
  require(TxDb.Hsapiens.UCSC.hg19.knownGene)
  require(org.Hs.eg.db)
  exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')    
  egs = unlist(mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG))
  a1 <- sapply(egs,function(eg){
    exons = exons.db[[eg]]
    if(!is.null(exons)){
      exons = reduce(exons)
      sum( width(exons))
    }
  })
  unlist(a1)
}

###
patient <- fread("data_clinical_patient.txt", data.table = F)
patient$PATIENT_ID <- gsub("MSK-P", "MSKP", patient$PATIENT_ID)
sample <- fread("data_clinical_sample.txt", data.table = F) 
sample$SAMPLE_ID <- gsub("MSK-P", "MSKP", sample$SAMPLE_ID)
sample$ONCOTREE_CODE[which(sample$CANCER_TYPE == "Soft Tissue Sarcoma")] <- "SOFT_TISSUE"
muts <- fread("data_mutations_extended_OncoKb.txt", data.table = F)
muts$Tumor_Sample_Barcode <- gsub("MSK-P", "MSKP", muts$Tumor_Sample_Barcode)
cna <- fread("data_CNA_OncoKb.txt", data.table = F)
cna$SAMPLE_ID <- gsub("MSK-P", "MSKP", cna$SAMPLE_ID)
fusions <- fread("data_fusions_OncoKb.txt", data.table = F)
fusions$Tumor_Sample_Barcode <- gsub("MSK-P", "MSKP", fusions$Tumor_Sample_Barcode)


#subset by tsc1_2 containing panels and those with cna, fusion, etc data, without MSK heme
assay <- read.table("assay_information.txt", header = T, sep = "\t")
tsc1_2_containing_assays <- unlist(read.table("TSC1_TSC2_containing_assays.txt", header = T, sep = "\t")$x)
cna_variants_only <- intersect(grep("variants", assay$alteration_types), grep("cna", assay$alteration_types))
assay <- assay[intersect(which(assay$SEQ_ASSAY_ID %in% tsc1_2_containing_assays), cna_variants_only), ]
assay <- assay[-which(assay$SEQ_ASSAY_ID == "MSK-IMPACT-HEME-399"),]
sample <- sample[which(sample$SAMPLE_TYPE == "Primary"),]
anatomic <- read.table("TCGAnames.txt", header = T, sep = "\t")
sample <- sample[which(sample$ONCOTREE_CODE %in% anatomic$ONCOTREE),]

#Each tumor should be treated separately but we shouldn't double count and we shouldn't include mets. 
sample$SAMPLE_ID -> sample_names
data_ids <- sample_names[which(sample$SEQ_ASSAY_ID %in% assay$SEQ_ASSAY_ID)]

patient$PATIENT_ID -> patient_ids
cna$SAMPLE_ID -> cna_names
muts$Tumor_Sample_Barcode -> muts_names
fusions$Tumor_Sample_Barcode -> fusion_names
Reduce(intersect, list(cna_names, muts_names, fusion_names, data_ids)) -> sect_samples
sect_patients <- lapply(strsplit(sect_samples, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-"))
patient_x <- patient[which(patient$PATIENT_ID %in% sect_patients),]


#subset
muts_x <- muts[which(muts_names %in% sect_samples),]
muts_x$PATIENT_ID <- unlist(lapply(strsplit(muts_x$Tumor_Sample_Barcode, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
muts_x <- split.data.frame(muts_x, muts_x$Tumor_Sample_Barcode)

cna_x <- cna[which(cna_names %in% sect_samples),]
cna_x$PATIENT_ID <- unlist(lapply(strsplit(cna_x$SAMPLE_ID, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
cna_x <- split.data.frame(cna_x, cna_x$SAMPLE_ID)

sample_x <- sample[which(sample_names %in% sect_samples),]
sample_x$PATIENT_ID <- unlist(lapply(strsplit(sample_x$SAMPLE_ID, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
sample_x <- split.data.frame(sample_x, sample_x$SAMPLE_ID)

fusion_x <- fusions[which(fusion_names %in% sect_samples),]
fusion_x$PATIENT_ID <- unlist(lapply(strsplit(fusion_x$Tumor_Sample_Barcode, "[-]"), function(x) paste(x[1:3], sep = "", collapse = "-")))
fusion_x <- split.data.frame(fusion_x, fusion_x$Tumor_Sample_Barcode)

centers <- unlist(lapply(sample_x, function(x) unlist(lapply(strsplit(x$PATIENT_ID, "-"), function(i) i[[2]]))))
    

#make into lists and break into cohorts, DFCI, MSK, and VICC
#TMB
#lapply(y, function(x) sum(as.numeric(hg19GeneLengths(x)))); take the averageof panel lengths
tmb <- unlist(lapply(muts_x, nrow))/unlist(lapply(sample_x,function(x) mean(x$Panel_Length)))
tmb_all <- tmb*1000000

#add fusion
#RAD15B removed (not present in panels)
gene <- c("ALK", "ATM", "BARD1", "BRAF", "BRCA1", "BRCA2", "BRIP1", "CDK12", "CHEK1", "EGFR",
          "ERBB2", "FGFR2", "FGFR3","IDH1", "KIT", "MET", "NTRK1", "NTRK2", "NTRK3", "PIK3CA",
          "RAD15B", "RET", "ROS1", "SMARCB1")
for(i in 1:length(gene)){
gene_mut <- unlist(lapply(muts_x, function(x) 
  ifelse(length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_1)>0)) | length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_cna <- unlist(lapply(cna_x, function(x) 
  ifelse(length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_1)>0)) | length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_sv <- unlist(lapply(fusion_x, function(x) 
  ifelse(length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_1)>0)) | length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_all <- ifelse(gene_mut == 1 | gene_cna == 1 | gene_sv == 1, 1, 0)
gene_df <- cbind.data.frame(gene_mut, gene_cna, gene_sv, gene_all)
colnames(gene_df) <- paste0(rep(gene[i],3), c("_mut", "_cna", "_sv", "_all"))
ifelse(i == 1, gene_df2 <- gene_df, gene_df2 <- cbind.data.frame(gene_df2, gene_df))
}

#KRAS, G12C in NSCLC, amgen Sotorasib
kras_mut <- unlist(lapply(muts_x, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) == "KRAS"),]$HGVSp_Short %in% c("p.G12C")))>0, 1, 0)))
kras <- ifelse(unlist(lapply(sample_x, function(x) ifelse(sum(x$ONCOTREE_CODE %in% c("LUAD", "LUSC"))>0, 1, 0))) 
               & kras_mut == 1, 1, 0)


#TSC1/2, definite mutations and deletions
#Load functions
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Polyphen_Prediction) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT_Prediction %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_DEL", "Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}

#filter for definite mutations defined as all out-of-frame deletions and insertions, in-frame deletions and insertions, splice site mutations, translation start site mutations, nonsense mutations, and nonstop mutations.
tsc1_definite <- calculateMutType(muts_x, "TSC1")[[2]]
tsc1_del <- unlist(lapply(cna_x, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% "TSC1"),]$ALTERATION %in% c("Deletion"))), 1, 0)))
tsc1_def <- ifelse(tsc1_definite == 1 | tsc1_del == 1, 1, 0)

tsc2_definite <- calculateMutType(muts_x, "TSC2")[[2]]
tsc2_del <- unlist(lapply(cna_x, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% "TSC2"),]$ALTERATION %in% c("Deletion"))), 1, 0)))
tsc2_def <- ifelse(tsc2_definite == 1 | tsc2_del == 1, 1, 0)

#filter for likely mutations, defined as missense + polyphen and SIFT impact
tsc1_likely <- calculateMutType(muts_x, "TSC1")[[1]]

#filter for likely mutations, defined as missense + polyphen and SIFT impact
tsc2_likely <- calculateMutType(muts_x, "TSC2")[[1]]

specific_drivers <- cbind.data.frame(gene_df2, KRAS_mut = kras, KRAS_cna = 0, KRAS_sv = 0, KRAS_all = kras,
                             TSC1.def_mut = tsc1_definite, TSC1.likely = tsc1_likely,
                             TSC1.def_cna = tsc1_del, TSC1.def_all = tsc1_def, 
                             TSC2.def_mut = tsc2_definite, TSC2.likely = tsc2_likely,
                             TSC2.def_cna = tsc2_del, TSC2.def_all = tsc2_def)

#Total number of nonsynonymous, CNA (-2 or +2), or fusion variations
allmuts <- sapply(c(gene, "KRAS", "TSC1", "TSC2"), 
                  function(p) unlist(lapply(muts_x, function(x) 
                    ifelse(length(grep(p,as.character(unlist(x$Hugo_Symbol))))>0, 1, 0))))

allsv <- sapply(c(gene, "KRAS", "TSC1", "TSC2"), 
                function(p) unlist(lapply(fusion_x, function(x) 
                  ifelse(length(grep(p,as.character(unlist(x[which(nchar(x$Fusion) >3),]$Hugo_Symbol))))>0, 1, 0))))

allcna <- sapply(c(gene, "KRAS", "TSC1", "TSC2"), 
                 function(p) unlist(lapply(cna_x, function(x) 
                   ifelse(length(grep(p,as.character(unlist(x[which(x$ALTERATION %in% c("Deletion", "Amplification")),]$HUGO_SYMBOL))))>0, 1, 0))))

alltotal <- sapply(1:ncol(allmuts), function(p){
  as.numeric(apply(cbind(allmuts[,p], allsv[,p], allcna[,p]), 1, sum)>0)
})
  
 
total_df <- cbind.data.frame(allmuts, allsv, allcna, alltotal)
colnames(total_df) <- paste0(c(gene, "KRAS", "TSC1", "TSC2"),rep(c(".total_muts", ".total_sv", ".total_cna", ".total_all"), each = ncol(alltotal)))
rownames(total_df) <- names(muts_x)

anatomic <- read.table("TCGAnames.txt", header = T, sep = "\t")
ct1 <- anatomic$ONCOTREE
names(ct1) <- anatomic$ONCOTREE
ct1 <- unlist(lapply(sample_x, function(x) unique(ct1[x$ONCOTREE_CODE][!is.na(ct1[x$ONCOTREE_CODE])])))


df2 <- cbind.data.frame(TumorID = names(muts_x), TumorType = unlist(lapply(sample_x, function(x) x$ONCOTREE_CODE)), PrimarySite = ct1, TumorMutationalBurden = tmb_all, specific_drivers)
total_df2 <- cbind.data.frame(TumorType = rownames(total_df), PrimarySite = ct1, total_df)

write.table(df2, "DFCI_df2.txt", sep = "\t", quote = F)
write.table(total_df2, "DFCI_total_df2.txt", sep = "\t", quote = F)



setwd("/Users/gunsagargulati/Desktop/AcutaCapital/AADI/draft1/TCGA")
#Import MAF files from TCGA
library(TCGAbiolinks)
`%notin%` <- Negate(`%in%`)
#Query cancer types
library(maftools)
library(dplyr)

#Load files
maf <- data.table::fread("TCGA_OncoKB_table.txt", data.table = F)
maf[is.na(maf)] <- ""
tcga_tumors <- unique(maf$TCGA_Name)

for(p in 1:length(tcga_tumors)){
data <- maf[which(maf$TCGA_Name == tcga_tumors[p]),]

#Define the tumor samples
tumors <- data$Tumor_Sample_Barcode
samples <- unique(as.character(unlist(tumors)))

sdata <- split.data.frame(data, tumors)

#Oncokb with clinical notations
cna <- data.table::fread("cna_OncoKb.txt", data.table = F)
cna <- cna[which(substring(cna$SAMPLE_ID, 1, 15) %in% substring(names(sdata), 1, 15)),]
cna <- split.data.frame(cna, cna$SAMPLE_ID)
sv <- data.table::fread("structural_variants_OncoKb.txt", data.table = F)
sv <- sv[which(substring(sv$SAMPLE_ID, 1, 15) %in% substring(names(sdata), 1, 15)),]
sv <- split.data.frame(sv, sv$SAMPLE_ID)

samples <- samples[which(substring(names(sdata), 1, 15) %in% substring(names(sv), 1, 15))]
sdata <- sdata[which(substring(names(sdata), 1, 15) %in% substring(names(sv), 1, 15))]

#Reorder to match
cna <- cna[order(names(cna))]
sv <- sv[order(names(sv))]
sdata <- sdata[order(names(sdata))]

if(length(sdata)>0){

#filter for tumor mutational burden using 35.8 MB for exon seq length, re: PMID: 32239176
tmb <- table(tumors)/35.8
tmb <- as.numeric(unlist(tmb[names(sdata)]))

#Genes
gene <- c("ALK", "ATM", "BARD1", "BRAF", "BRCA1", "BRCA2", "BRIP1", "CDK12", "CHEK1", "EGFR",
"ERBB2", "FGFR2", "FGFR3","IDH1", "KIT", "MET", "NTRK1", "NTRK2", "NTRK3", "PIK3CA",
"RAD15B", "RET", "ROS1", "SMARCB1")
for(i in 1:length(gene)){
gene_mut <- unlist(lapply(sdata, function(x) 
  ifelse(length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_1)>0)) | 
           length(which(nchar(x[which(as.character(unlist(x$Hugo_Symbol)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_cna <- unlist(lapply(cna, function(x) 
  ifelse(length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_1)>0)) | 
           length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_sv <- unlist(lapply(sv, function(x) 
  ifelse(length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_1)>0)) | 
           length(which(nchar(x[which(as.character(unlist(x$HUGO_SYMBOL)) == gene[i]),]$LEVEL_2)>0)), 1, 0)))
gene_all <- ifelse(gene_mut == 1 | gene_cna == 1 | gene_sv == 1, 1, 0)
gene_df <- cbind.data.frame(gene_mut, gene_cna, gene_sv, gene_all)
colnames(gene_df) <- paste0(rep(gene[i],3), c("_mut", "_cna", "_sv", "_all"))
ifelse(i == 1, gene_df2 <- gene_df, gene_df2 <- cbind.data.frame(gene_df2, gene_df))
}

#KRAS, G12C in NSCLC, amgen Sotorasib
kras_mut <- unlist(lapply(sdata, function(x) ifelse(length(which(paste0(substring(x[which(as.character(unlist(x$Hugo_Symbol)) == "KRAS"),]$Amino_acids, 1, 1), gsub("\\/.*", "", 
                                                                        x[which(as.character(unlist(x$Hugo_Symbol)) == "KRAS"),]$Protein_position),
                                                                        substring(x[which(as.character(unlist(x$Hugo_Symbol)) == "KRAS"),]$Amino_acids, 3)) %in% c("G12C")))>0, 1, 0)))
kras <- ifelse((tcga_tumors[p] == "LUAD" | tcga_tumors[p] == "LUSC") & kras_mut == 1, 1, 0)

#TSC1/2, definite mutations and deletions
#Load functions
calculateMutType <- function(sdata, geneName){
polyphen <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub(".*_", "", gsub("\\(.*", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$PolyPhen)) %in% c("damaging")))>0, 1, 0)))
sift <- unlist(lapply(sdata, function(x) ifelse(length(which(gsub("\\(.*", "", x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$SIFT) %in% c("deleterious")))>0,1, 0)))
definite <- unlist(lapply(sdata, function(x) ifelse(length(which(x[which(as.character(unlist(x$Hugo_Symbol)) %in% geneName),]$Variant_Classification %in% c("Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Nonsense_Mutation")))>0, 1, 0)))
likely <- ifelse(polyphen == 1 | sift == 1, 1, 0)
return(list(likely, definite))
}

#filter for definite mutations defined as all out-of-frame deletions and insertions, in-frame deletions and insertions, splice site mutations, translation start site mutations, nonsense mutations, and nonstop mutations.
tsc1_definite <- calculateMutType(sdata, "TSC1")[[2]]
tsc1_del <- unlist(lapply(cna, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% "TSC1"),]$ALTERATION %in% c("Deletion")))>0, 1, 0)))
tsc1_def <- ifelse(tsc1_definite == 1 | tsc1_del == 1, 1, 0)

tsc2_definite <- calculateMutType(sdata, "TSC2")[[2]]
tsc2_del <- unlist(lapply(cna, function(x) ifelse(length(which(x[which(as.character(unlist(x$HUGO_SYMBOL)) %in% "TSC2"),]$ALTERATION %in% c("Deletion")))>0, 1, 0)))
tsc2_def <- ifelse(tsc2_definite == 1 | tsc2_del == 1, 1, 0)

#filter for likely mutations, defined as missense + polyphen and SIFT impact
tsc1_mis <- calculateMutType(sdata, "TSC1")[[1]]
tsc1_sv <- unlist(lapply(sv, function(x) ifelse(length(x[which(as.character(unlist(x$Hugo_Symbol)) %in% "TSC1"),]$MUTATION_EFFECT %in% c("Likely Loss-of-function"))>0,1,0)))
tsc1_likely <- ifelse(tsc1_mis == 1 | tsc1_sv == 1, 1, 0)

#filter for likely mutations, defined as missense + polyphen and SIFT impact
tsc2_mis <- calculateMutType(sdata, "TSC2")[[1]]
tsc2_sv <- unlist(lapply(sv, function(x) ifelse(length(x[which(as.character(unlist(x$Hugo_Symbol)) %in% "TSC2"),]$MUTATION_EFFECT %in% c("Likely Loss-of-function"))>0,1,0)))
tsc2_likely <- ifelse(tsc2_mis == 1 | tsc2_sv == 1, 1, 0)


specific_drivers <- cbind.data.frame(gene_df2, KRAS_mut = kras, KRAS_cna = 0, KRAS_sv = 0, KRAS_all = kras,
TSC1.likely_all = tsc1_likely, TSC1.likely_mis = tsc1_mis, TSC1.likely_sv = tsc1_sv, TSC1.def_mut = tsc1_definite, TSC1.def_cna = tsc1_del, TSC1.def_all = tsc1_def,
TSC2.likely_all = tsc2_likely, TSC2.likely_mis = tsc2_mis, TSC2.likely_sv = tsc2_sv, TSC2.def_mut = tsc2_definite, TSC2.def_cna = tsc2_del, TSC2.def_all = tsc2_def)



#Total number of nonsynonymous, CNA (-2 or +2), or fusion variations

allmuts <- sapply(c(gene, "KRAS", "TSC1", "TSC2"), 
                  function(p) unlist(lapply(sdata, function(x) 
                    ifelse(length(grep(p,as.character(unlist(x$Hugo_Symbol))))>0, 1, 0)) == 1))

allsv <- sapply(c(gene, "KRAS", "TSC1", "TSC2"), 
                function(p) unlist(lapply(sv, function(x) 
                  ifelse(length(grep(p,as.character(unlist(x[which(nchar(x$FUSION) >3),]$HUGO_SYMBOL))))>0, 1, 0)) == 1))

allcna <- sapply(c(gene, "KRAS", "TSC1", "TSC2"), 
                 function(p) unlist(lapply(cna, function(x) 
                   ifelse(length(grep(p,as.character(unlist(x[which(x$ALTERATION %in% c("Deletion", "Amplification")),]$HUGO_SYMBOL))))>0, 1, 0)) == 1))
alltotal <- sapply(1:ncol(allmuts), function(p){
  as.numeric(apply(cbind(allmuts[,p], allsv[,p], allcna[,p]), 1, sum)>0)
})
total_df <- cbind.data.frame(allmuts, allsv, allcna, alltotal)
colnames(total_df) <- paste0(c(gene, "KRAS", "TSC1", "TSC2"),rep(c(".total_muts", ".total_sv", ".total_cna", ".total_all"), each = ncol(alltotal)))
rownames(total_df) <- names(sdata)

df <- cbind.data.frame(TumorID = names(sdata), TumorType = tcga_tumors[p], SampleSize = length(samples), 
                       TumorMutationalBurden = tmb, specific_drivers)
} else {
dummy <- data.frame(matrix(0, ncol = ncol(specific_drivers), nrow = 1))
colnames(dummy) <- colnames(specific_drivers)
df <- cbind.data.frame(TumorID = 0, TumorType = tcga_tumors[p], SampleSize = length(samples), TumorMutationalBurden = 0, dummy)
total_df <- rbind.data.frame(matrix(0, ncol = 4*(length(gene)+3), nrow = 1))
colnames(total_df) <- paste0(names(total),rep(c(".total_muts", ".total_sv", ".total_cna", ".total_all"), each = length(total)))
rownames(total_df) <- tcga_tumors[p]
}
ifelse(p == 1, df2 <- df, df2 <- rbind.data.frame(df2, df))
ifelse(p == 1, total_df2 <- total_df, total_df2 <- rbind.data.frame(total_df2, total_df))
print(tcga_tumors[p])
}

write.table(df2, "TCGA_df2.txt", sep = "\t", quote = F)
write.table(total_df2, "TCGA_total_df2.txt", sep = "\t", quote = F)



